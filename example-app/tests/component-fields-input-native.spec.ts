import { expect, test } from '@playwright/test';
import { getErrorMessage, goto, setFile } from './helpers';

const url = '/component-fields';
const file = './logo.svg';
const missError = 'Did you miss something ?';
const colorError = 'The red part should be greater than 200';
const radioError = 'Select the third value';
const rangeError = 'The value should be greater than 75';
const multipleError = 'Select at least two options';

test.describe('Component Fields Input Native', () => {
  // For native errors, we cannot detect whether the error message is displayed or not.
  // We also don't know if the reportValidity function was called or not.
  // So we can't really test the different modes, which is why we only test the submit mode here.
  test('mode=submit', async ({ page }) => {
    const { consoleMsg } = await goto(page, url);
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    expect(await getErrorMessage(page, 'radio-1')).toEqual(missError);
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    await expect(page.getByTestId('rfv-submit-disabled')).toBeDisabled();
    // checkbox
    await page.getByTestId('checkbox').focus();
    await page.getByTestId('checkbox').blur();
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    await page.getByTestId('checkbox').check();
    expect(await getErrorMessage(page, 'checkbox')).toEqual('');
    await page.getByTestId('checkbox').blur();
    expect(await getErrorMessage(page, 'checkbox')).toEqual('');
    await page.getByTestId('checkbox').uncheck();
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    await page.getByTestId('checkbox').blur();
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    // color
    await page.getByTestId('color').focus();
    await page.getByTestId('color').blur();
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    await page.getByTestId('color').fill('#ffffff');
    expect(await getErrorMessage(page, 'color')).toEqual('');
    await page.getByTestId('color').blur();
    expect(await getErrorMessage(page, 'color')).toEqual('');
    await page.getByTestId('color').fill('#000000');
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    await page.getByTestId('color').blur();
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    // date
    await page.getByTestId('date').focus();
    await page.getByTestId('date').blur();
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    await page.getByTestId('date').fill('2024-01-01');
    expect(await getErrorMessage(page, 'date')).toEqual('');
    await page.getByTestId('date').blur();
    expect(await getErrorMessage(page, 'date')).toEqual('');
    await page.getByTestId('date').fill('');
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    await page.getByTestId('date').blur();
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    // datetime-local
    await page.getByTestId('datetime-local').focus();
    await page.getByTestId('datetime-local').blur();
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    await page.getByTestId('datetime-local').fill('2024-01-01T00:00');
    expect(await getErrorMessage(page, 'datetime-local')).toEqual('');
    await page.getByTestId('datetime-local').blur();
    expect(await getErrorMessage(page, 'datetime-local')).toEqual('');
    await page.getByTestId('datetime-local').fill('');
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    await page.getByTestId('datetime-local').blur();
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    // email
    await page.getByTestId('email').focus();
    await page.getByTestId('email').blur();
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    await page.getByTestId('email').fill('foo@bar');
    expect(await getErrorMessage(page, 'email')).toEqual('');
    await page.getByTestId('email').blur();
    expect(await getErrorMessage(page, 'email')).toEqual('');
    await page.getByTestId('email').fill('');
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    await page.getByTestId('email').blur();
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    // email-multiple
    await page.getByTestId('email-multiple').focus();
    await page.getByTestId('email-multiple').blur();
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    await page.getByTestId('email-multiple').fill('foo@bar');
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(
      multipleError,
    );
    await page.getByTestId('email-multiple').blur();
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(
      multipleError,
    );
    await page.getByTestId('email-multiple').fill('');
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    await page.getByTestId('email-multiple').blur();
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    // file
    await page.getByTestId('file').focus();
    await page.getByTestId('file').blur();
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    await setFile(page, 'file', file);
    expect(await getErrorMessage(page, 'file')).toEqual('');
    await page.getByTestId('file').blur();
    expect(await getErrorMessage(page, 'file')).toEqual('');
    await setFile(page, 'file', []);
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    await page.getByTestId('file').blur();
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    // file-multiple
    await page.getByTestId('file-multiple').focus();
    await page.getByTestId('file-multiple').blur();
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    await setFile(page, 'file-multiple', file);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(multipleError);
    await page.getByTestId('file-multiple').blur();
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(multipleError);
    await setFile(page, 'file-multiple', []);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    await page.getByTestId('file-multiple').blur();
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    // month
    await page.getByTestId('month').focus();
    await page.getByTestId('month').blur();
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    await page.getByTestId('month').fill('2024-01');
    expect(await getErrorMessage(page, 'month')).toEqual('');
    await page.getByTestId('month').blur();
    expect(await getErrorMessage(page, 'month')).toEqual('');
    await page.getByTestId('month').fill('');
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    await page.getByTestId('month').blur();
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    // number
    await page.getByTestId('number').focus();
    await page.getByTestId('number').blur();
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    await page.getByTestId('number').fill('42');
    expect(await getErrorMessage(page, 'number')).toEqual('');
    await page.getByTestId('number').blur();
    expect(await getErrorMessage(page, 'number')).toEqual('');
    await page.getByTestId('number').fill('');
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    await page.getByTestId('number').blur();
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    // password
    await page.getByTestId('password').focus();
    await page.getByTestId('password').blur();
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    await page.getByTestId('password').fill('password');
    expect(await getErrorMessage(page, 'password')).toEqual('');
    await page.getByTestId('password').blur();
    expect(await getErrorMessage(page, 'password')).toEqual('');
    await page.getByTestId('password').fill('');
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    await page.getByTestId('password').blur();
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    // radio
    await page.getByTestId('radio-1').focus();
    await page.getByTestId('radio-1').blur();
    expect(await getErrorMessage(page, 'radio-1')).toEqual(missError);
    await page.getByTestId('radio-1').check();
    expect(await getErrorMessage(page, 'radio-1')).toEqual(radioError);
    await page.getByTestId('radio-1').blur();
    expect(await getErrorMessage(page, 'radio-1')).toEqual(radioError);
    // range
    await page.getByTestId('range').focus();
    await page.getByTestId('range').blur();
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    await page.getByTestId('range').fill('80');
    expect(await getErrorMessage(page, 'range')).toEqual('');
    await page.getByTestId('range').blur();
    expect(await getErrorMessage(page, 'range')).toEqual('');
    await page.getByTestId('range').fill('50');
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    await page.getByTestId('range').blur();
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    // search
    await page.getByTestId('search').focus();
    await page.getByTestId('search').blur();
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    await page.getByTestId('search').fill('search');
    expect(await getErrorMessage(page, 'search')).toEqual('');
    await page.getByTestId('search').blur();
    expect(await getErrorMessage(page, 'search')).toEqual('');
    await page.getByTestId('search').fill('');
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    await page.getByTestId('search').blur();
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    // tel
    await page.getByTestId('tel').focus();
    await page.getByTestId('tel').blur();
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    await page.getByTestId('tel').fill('00');
    expect(await getErrorMessage(page, 'tel')).toEqual('');
    await page.getByTestId('tel').blur();
    expect(await getErrorMessage(page, 'tel')).toEqual('');
    await page.getByTestId('tel').fill('');
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    await page.getByTestId('tel').blur();
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    // text
    await page.getByTestId('text').focus();
    await page.getByTestId('text').blur();
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    await page.getByTestId('text').fill('text');
    expect(await getErrorMessage(page, 'text')).toEqual('');
    await page.getByTestId('text').blur();
    expect(await getErrorMessage(page, 'text')).toEqual('');
    await page.getByTestId('text').fill('');
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    await page.getByTestId('text').blur();
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    // time
    await page.getByTestId('time').focus();
    await page.getByTestId('time').blur();
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    await page.getByTestId('time').fill('00:00');
    expect(await getErrorMessage(page, 'time')).toEqual('');
    await page.getByTestId('time').blur();
    expect(await getErrorMessage(page, 'time')).toEqual('');
    await page.getByTestId('time').fill('');
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    await page.getByTestId('time').blur();
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    // url
    await page.getByTestId('url').focus();
    await page.getByTestId('url').blur();
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    await page.getByTestId('url').fill('http://localhost');
    expect(await getErrorMessage(page, 'url')).toEqual('');
    await page.getByTestId('url').blur();
    expect(await getErrorMessage(page, 'url')).toEqual('');
    await page.getByTestId('url').fill('');
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    await page.getByTestId('url').blur();
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    // week
    await page.getByTestId('week').focus();
    await page.getByTestId('week').blur();
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    await page.getByTestId('week').fill('2024-W01');
    expect(await getErrorMessage(page, 'week')).toEqual('');
    await page.getByTestId('week').blur();
    expect(await getErrorMessage(page, 'week')).toEqual('');
    await page.getByTestId('week').fill('');
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    await page.getByTestId('week').blur();
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    // select
    await page.getByTestId('select').focus();
    await page.getByTestId('select').blur();
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    await page.getByTestId('select').selectOption('option 1');
    expect(await getErrorMessage(page, 'select')).toEqual('');
    await page.getByTestId('select').blur();
    expect(await getErrorMessage(page, 'select')).toEqual('');
    await page.getByTestId('select').selectOption('');
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    await page.getByTestId('select').blur();
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    // select-multiple
    await page.getByTestId('select-multiple').focus();
    await page.getByTestId('select-multiple').blur();
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    await page.getByTestId('select-multiple').selectOption('option 1');
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(
      multipleError,
    );
    await page.getByTestId('select-multiple').blur();
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(
      multipleError,
    );
    await page.getByTestId('select-multiple').selectOption([]);
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    await page.getByTestId('select-multiple').blur();
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    // datalist
    await page.getByTestId('datalist').focus();
    await page.getByTestId('datalist').blur();
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    await page.getByTestId('datalist').fill('option 1');
    expect(await getErrorMessage(page, 'datalist')).toEqual('');
    await page.getByTestId('datalist').blur();
    expect(await getErrorMessage(page, 'datalist')).toEqual('');
    await page.getByTestId('datalist').fill('');
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    await page.getByTestId('datalist').blur();
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    // textarea
    await page.getByTestId('textarea').focus();
    await page.getByTestId('textarea').blur();
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    await page.getByTestId('textarea').fill('textarea');
    expect(await getErrorMessage(page, 'textarea')).toEqual('');
    await page.getByTestId('textarea').blur();
    expect(await getErrorMessage(page, 'textarea')).toEqual('');
    await page.getByTestId('textarea').fill('');
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    await page.getByTestId('textarea').blur();
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    // submit
    await page.getByTestId('rfv-submit').click();
    expect(page.getByTestId('checkbox')).toBeFocused();
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    // fix error
    await page.getByTestId('checkbox').check();
    expect(await getErrorMessage(page, 'checkbox')).toEqual('');
    await page.getByTestId('checkbox').blur();
    expect(await getErrorMessage(page, 'checkbox')).toEqual('');
    await page.getByTestId('color').fill('#ffffff');
    expect(await getErrorMessage(page, 'color')).toEqual('');
    await page.getByTestId('color').blur();
    expect(await getErrorMessage(page, 'color')).toEqual('');
    await page.getByTestId('date').fill('2024-01-01');
    expect(await getErrorMessage(page, 'date')).toEqual('');
    await page.getByTestId('date').blur();
    expect(await getErrorMessage(page, 'date')).toEqual('');
    await page.getByTestId('datetime-local').fill('2024-01-01T00:00');
    expect(await getErrorMessage(page, 'datetime-local')).toEqual('');
    await page.getByTestId('datetime-local').blur();
    expect(await getErrorMessage(page, 'datetime-local')).toEqual('');
    await page.getByTestId('email').fill('foo@bar');
    expect(await getErrorMessage(page, 'email')).toEqual('');
    await page.getByTestId('email').blur();
    expect(await getErrorMessage(page, 'email')).toEqual('');
    await page.getByTestId('email-multiple').fill('foo@bar, bar@baz');
    expect(await getErrorMessage(page, 'email-multiple')).toEqual('');
    await page.getByTestId('email-multiple').blur();
    expect(await getErrorMessage(page, 'email-multiple')).toEqual('');
    await setFile(page, 'file', file);
    expect(await getErrorMessage(page, 'file')).toEqual('');
    await page.getByTestId('file').blur();
    expect(await getErrorMessage(page, 'file')).toEqual('');
    await setFile(page, 'file-multiple', [file, file]);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual('');
    await page.getByTestId('file-multiple').blur();
    expect(await getErrorMessage(page, 'file-multiple')).toEqual('');
    await page.getByTestId('month').fill('2024-01');
    expect(await getErrorMessage(page, 'month')).toEqual('');
    await page.getByTestId('month').blur();
    expect(await getErrorMessage(page, 'month')).toEqual('');
    await page.getByTestId('number').fill('42');
    expect(await getErrorMessage(page, 'number')).toEqual('');
    await page.getByTestId('number').blur();
    expect(await getErrorMessage(page, 'number')).toEqual('');
    await page.getByTestId('password').fill('password');
    expect(await getErrorMessage(page, 'password')).toEqual('');
    await page.getByTestId('password').blur();
    expect(await getErrorMessage(page, 'password')).toEqual('');
    await page.getByTestId('radio-3').check();
    expect(await getErrorMessage(page, 'radio-1')).toEqual('');
    await page.getByTestId('radio-3').blur();
    expect(await getErrorMessage(page, 'radio-1')).toEqual('');
    await page.getByTestId('range').fill('80');
    expect(await getErrorMessage(page, 'range')).toEqual('');
    await page.getByTestId('range').blur();
    expect(await getErrorMessage(page, 'range')).toEqual('');
    await page.getByTestId('search').fill('search');
    expect(await getErrorMessage(page, 'search')).toEqual('');
    await page.getByTestId('search').blur();
    expect(await getErrorMessage(page, 'search')).toEqual('');
    await page.getByTestId('tel').fill('00');
    expect(await getErrorMessage(page, 'tel')).toEqual('');
    await page.getByTestId('tel').blur();
    expect(await getErrorMessage(page, 'tel')).toEqual('');
    await page.getByTestId('text').fill('text');
    expect(await getErrorMessage(page, 'text')).toEqual('');
    await page.getByTestId('text').blur();
    expect(await getErrorMessage(page, 'text')).toEqual('');
    await page.getByTestId('time').fill('00:00');
    expect(await getErrorMessage(page, 'time')).toEqual('');
    await page.getByTestId('time').blur();
    expect(await getErrorMessage(page, 'time')).toEqual('');
    await page.getByTestId('url').fill('http://localhost');
    expect(await getErrorMessage(page, 'url')).toEqual('');
    await page.getByTestId('url').blur();
    expect(await getErrorMessage(page, 'url')).toEqual('');
    await page.getByTestId('week').fill('2024-W01');
    expect(await getErrorMessage(page, 'week')).toEqual('');
    await page.getByTestId('week').blur();
    expect(await getErrorMessage(page, 'week')).toEqual('');
    await page.getByTestId('select').selectOption('option 1');
    expect(await getErrorMessage(page, 'select')).toEqual('');
    await page.getByTestId('select').blur();
    expect(await getErrorMessage(page, 'select')).toEqual('');
    await page
      .getByTestId('select-multiple')
      .selectOption(['option 1', 'option 2']);
    expect(await getErrorMessage(page, 'select-multiple')).toEqual('');
    await page.getByTestId('select-multiple').blur();
    expect(await getErrorMessage(page, 'select-multiple')).toEqual('');
    await page.getByTestId('datalist').fill('option 1');
    expect(await getErrorMessage(page, 'datalist')).toEqual('');
    await page.getByTestId('datalist').blur();
    expect(await getErrorMessage(page, 'datalist')).toEqual('');
    await page.getByTestId('textarea').fill('textarea');
    expect(await getErrorMessage(page, 'textarea')).toEqual('');
    await page.getByTestId('textarea').blur();
    expect(await getErrorMessage(page, 'textarea')).toEqual('');
    await expect(page.getByTestId('rfv-submit-disabled')).toBeEnabled();
    await page.getByTestId('rfv-submit').click();
    expect(page.getByTestId('checkbox')).not.toBeFocused();
    expect(await getErrorMessage(page, 'checkbox')).toEqual('');
    expect(await getErrorMessage(page, 'color')).toEqual('');
    expect(await getErrorMessage(page, 'date')).toEqual('');
    expect(await getErrorMessage(page, 'datetime-local')).toEqual('');
    expect(await getErrorMessage(page, 'email')).toEqual('');
    expect(await getErrorMessage(page, 'email-multiple')).toEqual('');
    expect(await getErrorMessage(page, 'file')).toEqual('');
    expect(await getErrorMessage(page, 'file-multiple')).toEqual('');
    expect(await getErrorMessage(page, 'month')).toEqual('');
    expect(await getErrorMessage(page, 'number')).toEqual('');
    expect(await getErrorMessage(page, 'password')).toEqual('');
    expect(await getErrorMessage(page, 'radio-1')).toEqual('');
    expect(await getErrorMessage(page, 'range')).toEqual('');
    expect(await getErrorMessage(page, 'search')).toEqual('');
    expect(await getErrorMessage(page, 'tel')).toEqual('');
    expect(await getErrorMessage(page, 'text')).toEqual('');
    expect(await getErrorMessage(page, 'time')).toEqual('');
    expect(await getErrorMessage(page, 'url')).toEqual('');
    expect(await getErrorMessage(page, 'week')).toEqual('');
    expect(await getErrorMessage(page, 'select')).toEqual('');
    expect(await getErrorMessage(page, 'select-multiple')).toEqual('');
    expect(await getErrorMessage(page, 'datalist')).toEqual('');
    expect(await getErrorMessage(page, 'textarea')).toEqual('');
    expect(await consoleMsg).toBe(true);
    // manual reset
    await page.getByTestId('checkbox').uncheck();
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    await page.getByTestId('checkbox').blur();
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    await page.getByTestId('color').fill('#000000');
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    await page.getByTestId('color').blur();
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    await page.getByTestId('date').fill('');
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    await page.getByTestId('date').blur();
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    await page.getByTestId('datetime-local').fill('');
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    await page.getByTestId('datetime-local').blur();
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    await page.getByTestId('email').fill('');
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    await page.getByTestId('email').blur();
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    await page.getByTestId('email-multiple').fill('');
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    await page.getByTestId('email-multiple').blur();
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    await setFile(page, 'file', []);
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    await page.getByTestId('file').blur();
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    await setFile(page, 'file-multiple', []);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    await page.getByTestId('file-multiple').blur();
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    await page.getByTestId('month').fill('');
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    await page.getByTestId('month').blur();
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    await page.getByTestId('number').fill('');
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    await page.getByTestId('number').blur();
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    await page.getByTestId('password').fill('');
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    await page.getByTestId('password').blur();
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    await page.getByTestId('radio-1').check();
    expect(await getErrorMessage(page, 'radio-1')).toEqual(radioError);
    await page.getByTestId('radio-1').blur();
    expect(await getErrorMessage(page, 'radio-1')).toEqual(radioError);
    await page.getByTestId('range').fill('50');
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    await page.getByTestId('range').blur();
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    await page.getByTestId('search').fill('');
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    await page.getByTestId('search').blur();
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    await page.getByTestId('tel').fill('');
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    await page.getByTestId('tel').blur();
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    await page.getByTestId('text').fill('');
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    await page.getByTestId('text').blur();
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    await page.getByTestId('time').fill('');
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    await page.getByTestId('time').blur();
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    await page.getByTestId('url').fill('');
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    await page.getByTestId('url').blur();
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    await page.getByTestId('week').fill('');
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    await page.getByTestId('week').blur();
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    await page.getByTestId('select').selectOption('');
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    await page.getByTestId('select').blur();
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    await page.getByTestId('select-multiple').selectOption([]);
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    await page.getByTestId('select-multiple').blur();
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    await page.getByTestId('datalist').fill('');
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    await page.getByTestId('datalist').blur();
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    await page.getByTestId('textarea').fill('');
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    await page.getByTestId('textarea').blur();
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    await expect(page.getByTestId('rfv-submit-disabled')).toBeDisabled();
    await page.getByTestId('checkbox').check();
    await page.getByTestId('color').fill('#ffffff');
    await page.getByTestId('date').fill('2024-01-01');
    await page.getByTestId('datetime-local').fill('2024-01-01T00:00');
    await page.getByTestId('email').fill('foo@bar');
    await page.getByTestId('email-multiple').fill('foo@bar, bar@baz');
    await setFile(page, 'file', file);
    await setFile(page, 'file-multiple', file);
    await page.getByTestId('month').fill('2024-01');
    await page.getByTestId('number').fill('42');
    await page.getByTestId('password').fill('password');
    await page.getByTestId('radio-3').check();
    await page.getByTestId('range').fill('80');
    await page.getByTestId('search').fill('search');
    await page.getByTestId('tel').fill('00');
    await page.getByTestId('text').fill('text');
    await page.getByTestId('time').fill('00:00');
    await page.getByTestId('url').fill('http://localhost');
    await page.getByTestId('week').fill('2024-W01');
    await page.getByTestId('select').selectOption('option 1');
    await page.getByTestId('select-multiple').selectOption('option 1');
    await page.getByTestId('datalist').fill('option 1');
    await page.getByTestId('textarea').fill('textarea');
    // reset button
    await page.getByTestId('rfv-reset').click();
    await expect(page.getByTestId('checkbox')).not.toBeChecked();
    await expect(page.getByTestId('color')).toHaveValue('#000000');
    await expect(page.getByTestId('date')).toHaveValue('');
    await expect(page.getByTestId('datetime-local')).toHaveValue('');
    await expect(page.getByTestId('email')).toHaveValue('');
    await expect(page.getByTestId('email-multiple')).toHaveValue('');
    await expect(page.getByTestId('file')).toHaveValue('');
    await expect(page.getByTestId('file-multiple')).toHaveValue('');
    await expect(page.getByTestId('month')).toHaveValue('');
    await expect(page.getByTestId('number')).toHaveValue('');
    await expect(page.getByTestId('password')).toHaveValue('');
    await expect(page.getByTestId('radio-3')).not.toBeChecked();
    await expect(page.getByTestId('range')).toHaveValue('50');
    await expect(page.getByTestId('search')).toHaveValue('');
    await expect(page.getByTestId('tel')).toHaveValue('');
    await expect(page.getByTestId('text')).toHaveValue('');
    await expect(page.getByTestId('time')).toHaveValue('');
    await expect(page.getByTestId('url')).toHaveValue('');
    await expect(page.getByTestId('week')).toHaveValue('');
    await expect(page.getByTestId('select')).toHaveValue('');
    await expect(page.getByTestId('select-multiple')).toHaveValue('');
    await expect(page.getByTestId('datalist')).toHaveValue('');
    await expect(page.getByTestId('textarea')).toHaveValue('');
    expect(await getErrorMessage(page, 'checkbox')).toEqual(missError);
    expect(await getErrorMessage(page, 'color')).toEqual(colorError);
    expect(await getErrorMessage(page, 'date')).toEqual(missError);
    expect(await getErrorMessage(page, 'datetime-local')).toEqual(missError);
    expect(await getErrorMessage(page, 'email')).toEqual(missError);
    expect(await getErrorMessage(page, 'email-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'file')).toEqual(missError);
    expect(await getErrorMessage(page, 'file-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'month')).toEqual(missError);
    expect(await getErrorMessage(page, 'number')).toEqual(missError);
    expect(await getErrorMessage(page, 'password')).toEqual(missError);
    expect(await getErrorMessage(page, 'radio-1')).toEqual(missError);
    expect(await getErrorMessage(page, 'range')).toEqual(rangeError);
    expect(await getErrorMessage(page, 'search')).toEqual(missError);
    expect(await getErrorMessage(page, 'tel')).toEqual(missError);
    expect(await getErrorMessage(page, 'text')).toEqual(missError);
    expect(await getErrorMessage(page, 'time')).toEqual(missError);
    expect(await getErrorMessage(page, 'url')).toEqual(missError);
    expect(await getErrorMessage(page, 'week')).toEqual(missError);
    expect(await getErrorMessage(page, 'select')).toEqual(missError);
    expect(await getErrorMessage(page, 'select-multiple')).toEqual(missError);
    expect(await getErrorMessage(page, 'datalist')).toEqual(missError);
    expect(await getErrorMessage(page, 'textarea')).toEqual(missError);
    await expect(page.getByTestId('rfv-submit-disabled')).toBeDisabled();
  });
});
